import streamlit as st
import pickle
import numpy as np
import pandas as pd
from sklearn.cluster import KMeans


# ƒê·ªãnh nghƒ©a t·∫≠p lu·∫≠t
def rfm_level(df):
    # Check for special 'STARS' and 'NEW' conditions first
    if df['RFM_Score'] >=14:
        return 'VIP' # mua h√†ng g·∫ßn nh·∫•t, ƒë∆°n h√†ng gi√° tr·ªã cao nh·∫•t v√† s·ªë l·∫ßn giao d·ªãch cao nh·∫•t
    elif df['F'] >=4 and df['M']>=4 and df['R'] >= 3 and df['RFM_Score'] < 14:
        return 'Loyal Customers' # s·ªë l·∫ßn giao d·ªãch cao nh·∫•t, ƒë∆°n h√†ng gi√° tr·ªã cao nh·∫•t nh∆∞ng kh√¥ng xu·∫•t hi·ªán g·∫ßn nh·∫•t. 
    elif (df['R'] == 2 or df['R'] == 3) and (df['F'] == 2 or df['F'] == 3) and (df['M'] == 2 or df['M'] == 3):
        return 'Light' # kh√°ch h√†ng ti·ªÅm nƒÉng th√†nh kh√°ch h√†ng trung th√†nh 
    elif df['R'] <= 2:
        return 'At-Risk Customers' # kh√°ch h√†ng l√¢u r·ªìi kh√¥ng xu·∫•t hi·ªán n√™n c√≥ kh·∫£ nƒÉng r·ªùi ƒëi
    elif df['M'] ==1 and  df['F'] ==1 and df['R'] ==5:
        return 'New Customers'# kh√°ch h√†ng m·ªõi xu·∫•t hi·ªán, giao d·ªãch c√≤n √≠t v√† c√≤n thƒÉm d√≤ c·ª≠a h√†ng
    else: 
        return 'Regulars' # Kh√°ch h√†ng th√¥ng th∆∞·ªùng


# Thi·∫øt l·∫≠p ti√™u ƒë·ªÅ trang
st.set_page_config(page_title="Ph√¢n c·ª•m kh√°ch h√†ng", layout="wide")

# T·∫°o khung cho t√™n trang web
st.markdown(
    """
    <style>
    .header-container {
        position: relative;
        text-align: center;
        margin-bottom: 80px; /* tr√°nh che tabs */
    }

    .header-title {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: rgba(0, 255, 0, 0.92);
        color: #1f1f1f;
        padding: 25px 100px;
        border-radius: 16px;
        font-size: 42px;
        font-weight: 700;
        white-space: nowrap;
        box-shadow: 0 6px 18px rgba(0, 0, 0, 0.15);
    }

    .header-image {
        width: 50%;
        height: 100px;
        object-fit: cover;
        border-radius: 12px;
    }
    </style>

    <div class="header-container">
        <img src="image.png" class="header-image"/>
        <div class="header-title">D·ª± √Ån Ph√¢n C·ª•m Kh√°ch H√†ng</div>
    </div>
    """,
    unsafe_allow_html=True
)


# Ti√™u ƒë·ªÅ ch√≠nh
#st.title("D·ª± √Ån Ph√¢n C·ª•m Kh√°ch H√†ng")

# Tabs tr√™n c√πng
tabs = st.tabs(["üè† Trang Ch·ªß", "üìä Ph∆∞∆°ng Ph√°p Ph√¢n C·ª•m", "üìà K·∫øt Qu·∫£ D·ª± √Ån", "üß™ Tr·∫£i Nghi·ªám Ph√¢n C·ª•m"])

# --- Tab 1: Trang Ch·ªß ---
with tabs[0]:
    st.header("Gi·ªõi thi·ªáu d·ª± √°n")

    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.image("image_3.png", caption="Minh h·ªça d·ª± √°n ph√¢n c·ª•m kh√°ch h√†ng", use_container_width=True)

    #st.image("image_3.png", caption="Minh h·ªça d·ª± √°n ph√¢n c·ª•m kh√°ch h√†ng", use_container_width =True, width = 10)
    st.write("""
    D·ª± √°n n√†y nh·∫±m ph√¢n t√≠ch d·ªØ li·ªáu kh√°ch h√†ng v√† √°p d·ª•ng k·ªπ thu·∫≠t **ph√¢n c·ª•m (clustering)** ƒë·ªÉ t√¨m ra c√°c nh√≥m kh√°ch h√†ng c√≥ h√†nh vi t∆∞∆°ng ƒë·ªìng.
    
    **M·ª•c ti√™u**:
    - Hi·ªÉu r√µ h∆°n v·ªÅ c√°c nh√≥m kh√°ch h√†ng kh√°c nhau.
    - T·ªëi ∆∞u h√≥a chi·∫øn l∆∞·ª£c marketing v√† chƒÉm s√≥c kh√°ch h√†ng.
    - Tr·∫£i nghi·ªám c√¥ng ngh·ªá ph√¢n t√≠ch d·ªØ li·ªáu th·ª±c t·∫ø.
             
    **B√†i to√°n**:
             
    D·ª± √°n th·ª±c hi·ªán ph√¢n c·ª•m kh√°ch h√†ng cho m·ªôt c·ª≠a h√†ng b√°n l·∫ª ·ªü M·ªπ. 
    - C·ª≠a h√†ng c√≥ 3898 kh√°ch h√†ng v·ªõi th·ªùi gian giao d·ªãch t·ª´ ƒë·∫ßu nƒÉm 2014 ƒë·∫øn cu·ªëi nƒÉm 2015.         
    - C·ª≠a h√†ng c√≥ t·ªïng c·ªông 167 s·∫£n ph·∫©m, ƒë∆∞·ª£c chia l√†m 11 lo·∫°i s·∫£n ph·∫©m bao g·ªìm Fresh Food, Dairy, 
    - Bakery & Sweets, Household & Hygiene, Beverages, Frozen & Processed Food, Pantry Staples, Specialty & Seasonal, Pet Care, Personal Care, Snacks.
    

    Ng√¥n ng·ªØ v√† c√°c th∆∞ vi·ªán s·ª≠ d·ª•ng: **Python, Streamlit, scikit-learn, pandas, matplotlib**
    """)

# --- Tab 2: Ph∆∞∆°ng Ph√°p Ph√¢n C·ª•m ---
with tabs[1]:
    st.header("Ph∆∞∆°ng ph√°p ph√¢n c·ª•m kh√°ch h√†ng")
    st.subheader("1. Ph√¢n c·ª•m d·ª±a v√†o t·∫≠p lu·∫≠t")
    st.write("""
    D·ªØ li·ªáu ƒë∆∞·ª£c ti·ªÅn x·ª≠ l√≠ nh∆∞ lo·∫°i b·ªè c√°c gi√° tr·ªã null, c√°c gi√° tr·ªã thi·∫øu
    v√† t√≠nh to√°n c√°c ƒë·∫°i l∆∞·ª£ng **Requency (R)**, **Frequency (F)** v√† **Monetary (M)**.

    Sau ƒë√≥ √°p d·ª•ng t·∫≠p lu·∫≠t ƒë·ªÉ ph√¢n c·ª•m. T·∫≠p lu·∫≠t chia kh√°ch h√†ng th√†nh 6 nh√≥m bao g·ªìm
    1. Kh√°ch h√†ng **VIP: R+F+M ‚â• 14**
    2. Kh√°ch h√†ng trung th√†nh **Loyal Customers: IF F‚â•4 & M‚â•4 & R‚â•3**
    3. Kh√°ch h√†ng mang √≠t l·ª£i nhu·∫≠n **Light Customers: (R=2|3) & (F=2|3) & (M=2|3)**
    4. Kh√°ch h√†ng m·ªõi **New Customers: R=5 & F=1 & M=1**
    5. Kh√°ch h√†ng c√≥ nguy c∆° r·ªùi ƒëi **At-risk Customers: R ‚â§2**
    6. Kh√°ch h√†ng b√¨nh th∆∞·ªùng **Regulars: C√≤n l·∫°i**
       
    """)
    st.subheader("2. Ph√¢n c·ª•m d·ª±a v√†o thu·∫≠t to√°n KMeans")

    st.write("""
    D·ªØ li·ªáu ƒë∆∞·ª£c ti·ªÅn x·ª≠ l√Ω v√† chu·∫©n h√≥a tr∆∞·ªõc khi √°p d·ª•ng m√¥ h√¨nh ph√¢n c·ª•m.
    
    C√°c b∆∞·ªõc ch√≠nh:
    1. Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu: lo·∫°i b·ªè gi√° tr·ªã thi·∫øu, chu·∫©n h√≥a d·ªØ li·ªáu.
    2. √Åp d·ª•ng m√¥ h√¨nh **KMeans** t·ª´ th∆∞ vi·ªán `scikit-learn`.
    3. Ch·ªçn s·ªë l∆∞·ª£ng c·ª•m t·ªëi ∆∞u d·ª±a tr√™n ph∆∞∆°ng ph√°p **Elbow**.
    4. Tr·ª±c quan h√≥a k·∫øt qu·∫£ b·∫±ng bi·ªÉu ƒë·ªì 2D.

    Th∆∞ vi·ªán v√† thu·∫≠t to√°n s·ª≠ d·ª•ng: `KMeans`, `StandardScaler`, `matplotlib`, `seaborn`
    """)

# --- Tab 3: K·∫øt Qu·∫£ D·ª± √Ån ---
with tabs[2]:
    st.header("K·∫øt qu·∫£ c·ªßa d·ª± √°n")
    st.subheader("1. K·∫øt qu·∫£ ph√¢n c·ª•m b·∫±ng t·∫≠p lu·∫≠t")
    st.write("""
    Bi·ªÉu ƒë·ªì ph√¢n c·ª•m:""")
    st.image("Buble_Tapluat.png", caption="Bi·ªÉu ƒë·ªì ph√¢n c·ª•m 2D", use_container_width =True)
    #st.image("RFM Segments.png", caption="Bi·ªÉu ƒë·ªì ph√¢n c·ª•m 2D", use_container_width =True)
    st.subheader("2. K·∫øt qu·∫£ ph√¢n c·ª•m b·∫±ng KMeans")
    st.write("""
    Sau khi ph√¢n c·ª•m, d·ªØ li·ªáu kh√°ch h√†ng ƒë∆∞·ª£c chia th√†nh c√°c nh√≥m c·ª• th·ªÉ nh∆∞ sau:
    
    - **Cluster 0**: kh√°ch h√†ng **VIP** v·ªõi t·∫ßn su·∫•t mua nhi·ªÅu nh·∫•t v√† chi ti√™u cao nh·∫•t.
    - **Cluster 1**: kh√°ch h√†ng **NON-ACTIVE** ƒë√£ l√¢u kh√¥ng quay l·∫°i (~1.5 nƒÉm), c√≥ th·ªÉ ƒë√£ r·ªùi b·ªè c·ª≠a h√†ng ho·∫∑c kh√°ch v√£ng lai. 
    - **Cluster 2**: chi·∫øm s·ªë ƒë√¥ng nh·∫•t, th·ªùi ƒëi·ªÉm mua h√†ng g·∫ßn nh·∫•t, t·∫ßn su·∫•t mua h√†ng trung b√¨nh v√† chi ti√™u trung b√¨nh n√™n thu·ªôc nh√≥m kh√°ch h√†ng trung th√†nh **LOYAL CUSTOMERS**.
    - **Cluster 3**: g·∫ßn m·ªôt nƒÉm ch∆∞a quay l·∫°i n√™n thu·ªôc nh√≥m c√≥ nguy c∆° r·ªùi ƒëi **AT-RISK CUSTOMERS**.
    - **Cluster 4**: th·ªùi ƒëi·ªÉm mua h√†ng c≈©ng kh√° l√¢u, t·∫ßn su·∫•t mua h√†ng trung b√¨nh v√† chi ti√™u trung b√¨nh n√™n thu·ªôc nh√≥m mang l·∫°i l·ª£i nhu·∫≠n √≠t cho c·ª≠a h√†ng **LIGHT CUSTOMERS**.

    
    Bi·ªÉu ƒë·ªì ph√¢n c·ª•m:
    """)
    # (B·∫°n c√≥ th·ªÉ ch√®n h√¨nh ·∫£nh ho·∫∑c bi·ªÉu ƒë·ªì ·ªü ƒë√¢y n·∫øu c√≥)
    st.image("Buble_KMeans.png", caption="Bi·ªÉu ƒë·ªì ph√¢n c·ª•m 2D", use_container_width =True)
    #st.image("Unsupervised Segments.png", caption="Bi·ªÉu ƒë·ªì ph√¢n c·ª•m 2D", use_container_width =True)

# --- Tab 4: Tr·∫£i Nghi·ªám Ph√¢n C·ª•m ---

# Load d·ªØ li·ªáu RFM t·ª´ file
@st.cache_data
def load_rfm_data():
    return pd.read_csv("rfm_df.csv")

# H√†m ph√¢n nh√≥m theo RFM
def rfm_level(df):
    if df['RFM_Score'] >= 14:
        return 'VIP'
    elif df['F'] >= 4 and df['M'] >= 4 and df['R'] >= 3 and df['RFM_Score'] < 14:
        return 'Loyal Customers'
    elif (df['R'] in [2, 3]) and (df['F'] in [2, 3]) and (df['M'] in [2, 3]):
        return 'Light'
    elif df['R'] <= 2:
        return 'At-Risk Customers'
    elif df['M'] == 1 and df['F'] == 1 and df['R'] == 5:
        return 'New Customers'
    else:
        return 'Regulars'

rfm_data = load_rfm_data()

with tabs[3]:
    st.header("Tr·∫£i nghi·ªám ph√¢n c·ª•m")
    st.write("Ch·ªçn c√°ch nh·∫≠p d·ªØ li·ªáu ƒë·ªÉ d·ª± ƒëo√°n nh√≥m ph√¢n c·ª•m c·ªßa kh√°ch h√†ng:")

    mode = st.radio("Ch·ªçn h√¨nh th·ª©c nh·∫≠p", ["üî¢ Nh·∫≠p th·ªß c√¥ng", "üÜî Ch·ªçn t·ª´ danh s√°ch ID"])
    input_data = None

    if mode == "üî¢ Nh·∫≠p th·ªß c√¥ng":
        sub_mode = st.radio("C√°ch nh·∫≠p th·ªß c√¥ng", ["Nh·∫≠p Recency/Frequency/Monetary", "Nh·∫≠p Customer ID b·∫±ng tay"])

        if sub_mode == "Nh·∫≠p Recency/Frequency/Monetary":
            recency = st.slider("Recency (s·ªë ng√†y k·ªÉ t·ª´ l·∫ßn mua g·∫ßn nh·∫•t)", 0, 365, 90)
            frequency = st.slider("Frequency (s·ªë l·∫ßn mua h√†ng)", 1, 100, 10)
            monetary = st.slider("Monetary (t·ªïng gi√° tr·ªã mua h√†ng)", 10, 500, 100)
            input_data = np.array([[recency, frequency, monetary]])

        elif sub_mode == "Nh·∫≠p Customer ID b·∫±ng tay":
            customer_id_input = st.text_input("Nh·∫≠p Customer ID:")
            if customer_id_input.strip():
                try:
                    customer_id = int(customer_id_input)
                    row = rfm_data[rfm_data["CustomerID"] == customer_id]
                    if not row.empty:
                        recency = row["Recency"].values[0]
                        frequency = row["Frequency"].values[0]
                        monetary = row["Monetary"].values[0]
                        st.markdown(f"**Recency:** {recency}  \n**Frequency:** {frequency}  \n**Monetary:** {monetary}")
                        input_data = np.array([[recency, frequency, monetary]])
                    else:
                        st.warning("Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng trong d·ªØ li·ªáu.")
                except ValueError:
                    st.error("Customer ID ph·∫£i l√† s·ªë nguy√™n.")

    elif mode == "üÜî Ch·ªçn t·ª´ danh s√°ch ID":
        customer_ids = rfm_data['CustomerID'].unique()
        selected_id = st.selectbox("Ch·ªçn ID kh√°ch h√†ng", customer_ids)
        customer_row = rfm_data[rfm_data['CustomerID'] == selected_id]
        if not customer_row.empty:
            recency = customer_row['Recency'].values[0]
            frequency = customer_row['Frequency'].values[0]
            monetary = customer_row['Monetary'].values[0]
            st.markdown(f"**Recency:** {recency}  \n**Frequency:** {frequency}  \n**Monetary:** {monetary}")
            input_data = np.array([[recency, frequency, monetary]])
        else:
            st.warning("Kh√¥ng t√¨m th·∫•y th√¥ng tin kh√°ch h√†ng.")
            input_data = None

    # --- N√∫t ph√¢n c·ª•m ---
    if st.button("Ph√¢n c·ª•m d·ª±a v√†o KMeans & RFM") and input_data is not None:
        try:
            # ---- D·ª± ƒëo√°n b·∫±ng m√¥ h√¨nh KMeans ----
            with open("customer_segmentation_kmeans_model.pkl", "rb") as f:
                model = pickle.load(f)

            cluster_label = model.predict(input_data)[0]

            st.subheader("üìç K·∫øt qu·∫£ t·ª´ m√¥ h√¨nh KMeans:")
            if cluster_label == 0:
                st.success("KMeans: Kh√°ch h√†ng l√† **VIP**.")
            elif cluster_label == 1:
                st.success("KMeans: Kh√°ch h√†ng l√† **NON-ACTIVE CUSTOMERS**.")
            elif cluster_label == 2:
                st.success("KMeans: Kh√°ch h√†ng l√† **LOYAL CUSTOMERS**.")
            elif cluster_label == 3:
                st.success("KMeans: Kh√°ch h√†ng l√† **AT-RISK CUSTOMERS**.")
            elif cluster_label == 4:
                st.success("KMeans: Kh√°ch h√†ng l√† **LIGHT CUSTOMERS**.")
            else:
                st.info(f"KMeans: C·ª•m s·ªë {cluster_label} (ch∆∞a ƒë·∫∑t nh√£n).")

            # ---- D·ª± ƒëo√°n b·∫±ng ph∆∞∆°ng ph√°p RFM ph√¢n v·ªã ----
            # L·∫•y ph√¢n v·ªã t·ª´ d·ªØ li·ªáu
            r_quartiles = pd.qcut(rfm_data['Recency'], 5, retbins=True)[1]
            f_quartiles = pd.qcut(rfm_data['Frequency'], 5, retbins=True)[1]
            m_quartiles = pd.qcut(rfm_data['Monetary'], 5, retbins=True)[1]

            def get_rfm_rank(value, bins, reverse=False):
                for i in range(1, len(bins)):
                    if value <= bins[i]:
                        return 6 - i if reverse else i
                return 1 if reverse else 5

            r = get_rfm_rank(recency, r_quartiles, reverse=True)
            f = get_rfm_rank(frequency, f_quartiles)
            m = get_rfm_rank(monetary, m_quartiles)
            rfm_score = r + f + m

            rfm_input = {'R': r, 'F': f, 'M': m, 'RFM_Score': rfm_score}
            segment = rfm_level(rfm_input)

            st.subheader("üìä K·∫øt qu·∫£ theo ph∆∞∆°ng ph√°p RFM ph√¢n v·ªã:")
            st.success(f"RFM: Kh√°ch h√†ng thu·ªôc nh√≥m **{segment}** (R={r}, F={f}, M={m}, RFM_Score={rfm_score})")

        except Exception as e:
            st.error("L·ªói khi ph√¢n c·ª•m.")
            st.exception(e)
